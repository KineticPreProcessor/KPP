.. _install:

############
Installation
############

This section can be skipped if KPP is already installed on your system.

========================
Download KPP from Github
========================

Clone the KPP source code from the `KPP Github repository
<https://github.com/KineticPreProcessor/KPP>`_:

.. code-block:: console

   $ cd $HOME
   $ git clone https://github.com/KineticPreProcessor/KPP.git

This will create a directory named KPP in your home directory.

========================================
Define the KPP_HOME environment variable
========================================

Define the :envvar:`$KPP_HOME` environment variable to point to the
complete path where KPP is installed.  Also, add the path of the KPP
executable to the :envvar:`$PATH` environment variable.

If you are using the Unix C-shell (aka :program:`csh`), add
add these statements to your :file:`$HOME/.cshrc` file:

.. code-block:: csh

   setenv KPP_HOME $HOME/kpp
   setenv PATH ${PATH}:$KPP_HOME/bin

and then apply the settings with:

.. code-block:: console

   $ source $HOME/.cshrc

If, on the other hand, you are using the Unix :program:`bash` shell,
add these statements to your :file:`$HOME/.bashrc` file:

.. code-block:: bash

   export KPP_HOME=$HOME/kpp
   export PATH=$PATH:$KPP_HOME/bin

and then apply the settings with:

.. code-block:: console

   $ source $HOME/.bashrc

Now if you type:

.. code-block:: console

   $ echo $PATH

You should see the :envvar:`$KPP_HOME/bin` directory placed at the end of
the :envvar:`PATH` variable.

.. _test-for-dependencies:

=====================================================
Test if KPP dependencies are installed on your system
=====================================================

KPP depends on several other Unix packages.  Before using KPP for the
first time, test if these are installed on your system.  If any of
these packages are missing, you can install them with your
system's package manager (e.g. :program:`apt` for Ubuntu,
:program:`yum` for Fedora, :program:`homebrew` for MacOS, etc.), or
with `Spack <https://spack.readthedocs.io>`_.

gcc
---

.. important::

   You may have to follow some :ref:`additional configuration
   and installation steps <additional-steps-macosx>` to install
   :program:`gcc` on MacOS X systems.

KPP uses the `GNU Compiler Collection <https://gcc.gnu.org/>`_ (aka gcc)
by default. A version of gcc comes pre-installed with most Linux or
MacOS systems. To test if gcc is installed on your system, type:

.. code-block :: console

   $ gcc --version

This will display the version information, such as:

.. code-block:: console

   gcc (GCC) 11.2.0
   Copyright (C) 2021 Free Software Foundation, Inc.
   This is free software; see the source for copying conditions.  There is NO
   warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

sed
---
The :program:`sed` utility is used to search for and replace text
in files.  To test if :program:`sed` has been installed, type:

.. code-block:: console

   $ which sed

This will print the path to :program:`sed` on your system.

bison
-----

The :program:`bison` utility parses the chemical mechanism file into a
computer-readable syntax.  To test :program:`bison` is installed, type:

.. code-block:: console

   $ which bison

This will print the path to :program:`bison` on your system.

flex
----

.. important::

   You may have to follow some :ref:`additional configuration
   and installation steps <additional-steps-macosx>` to install
   :program:`flex` on MacOS X systems.

The :program:`flex` (the Fast Lexical Analyzer) creates a scanner that
can recognize the syntax generated by :program:`bison`.  To test if
:program:`flex` is installed, type:

.. code-block:: console

   $ which flex

This will print the path to :program:`flex` on your system.

Enter the path where the flex library (:file:`libfl.a` or
:file:`libfl.so` or ) is located into :file:`src/Makefile.defs`, e.g.

.. code-block:: make

   FLEX_LIB_DIR=/usr/lib

========================
Build the KPP executable
========================

Change to the KPP/src directory:

.. code-block:: console

   $ cd $KPP_HOME/src

To clean a previously-built KPP installation, delete the KPP object
files and all the examples with:

.. code-block:: console

   $ make clean

To delete a previoulsy-built KPP executable as well, type:

.. code-block:: console

   $ make distclean

KPP will use :program:`gcc` as the default compiler.  If you would
like to use a different compiler (e.g. :program:`icc`), then edit
:file:`src/Makefile.defs` to add your compiler name.

Create the KPP executable with:

.. code-block:: console

   $ make

You should see output similar to:

.. code-block:: console

   gcc -g -Wall -Wno-unused-function -I/usr/include -c code.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_c.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_f77.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_f90.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_matlab.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c debug.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c gen.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c kpp.c
   flex -olex.yy.c scan.l
   bison -d -o y.tab.c scan.y
   gcc -g -Wall -Wno-unused-function -I/usr/include -c lex.yy.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c scanner.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c scanutil.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c y.tab.c
   gcc -g -Wall -Wno-unused-function code.o code_c.o
       code_f77.o code_f90.o code_matlab.o debug.o gen.o kpp.o
       lex.yy.o scanner.o scanutil.o y.tab.o -L/usr/lib -lfl -o kpp

This will create the executable file :file:`$KPP_HOME/bin/kpp`.

.. _additional-steps-macosx:

==========================================
Additional steps for installing on MacOS X
==========================================

When installing KPP on a MacOS X system, some additional steps may be
necessary.  This is because MacOS X is based on BSD Unix, which has
several differences from GNU/Linux.

.. _force-macos-to-recognize-gcc-compiler:

Force MacOS to recognize the gcc compiler
-----------------------------------------

On MacOS X, if you type:

.. code-block:: console

   $ gcc --version

you will probably see output similar to:

.. code-block:: console

   Apple clang version 13.1.6 (clang-1316.0.21.2.5)
   Target: x86_64-apple-darwin21.5.0
   Thread model: posix
   InstalledDir: /Library/Developer/CommandLineTools/usr/bin

This is because MacOS X installs :program:`clang` as :program:`gcc`.
To force MacOS X to recognize the :program:`gcc` compiler, follow
these steps:

#. Use the :program:`homebrew` package manager to install
   :program:`gcc`:

   .. code-block:: console

      $ brew install gcc

#. Type this command:

   .. code-block:: console

      $ ls /usr/local/Cellar/gcc/*/bin/ | grep gcc

   You should see output such as:

   .. code-block:: console

      gcc-11*
      gcc-ar-11*
      gcc-nm-11*
      gcc-ranlib-11*
      # ... etc ...

   This output indicates :program:`gcc` major version 11 has been
   installed.  (Your version may differ.)

#. Now that you know that the :program:`gcc` compiler's executable is
   actually named :file:`gcc-11`, you can define some aliases that
   will override :program:`clang` with :program:`gcc`.  Add
   the following code-block to your :file:`.bashrc` file (or to your
   :file:`.bash_aliases` file if you have one):

   .. code-block:: bash

      #============================================================================
      # Compiler settings (MacOS)
      #
      # NOTE: MacOSX installs Clang as /usr/bin/gcc, so we have to manually
      # force reference to gcc-11, g++-11, and gfortran-11, which HomeBrew
      # installs to /usr/local/bin.  (bmy, 10/28/21)
      #============================================================================
      alias gcc=gcc-11
      alias g++=g++-11
      alias gfortran=gfortran-11
      export CC=gcc
      export CXX=g++-11
      export FC=gfortran-11
      export F77=gfortran-11

   Then apply the changes with:

   .. code-block:: console

      $ . ~/.bashrc

#. To check if your shell now recognizes the :program:`gcc` compiler, type:

   .. code-block:: console

      $ gcc --version

   You should see output similar to:

   .. code-block:: console

      gcc-11 (Homebrew GCC 11.3.0_1) 11.3.0
      Copyright (C) 2021 Free Software Foundation, Inc.
      This is free software; see the source for copying conditions.  There is NO
      warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

   This now indicates that your compiler is :program:`gcc` and not
   :program:`clang`.

.. _install-flex-with-homebrew:

Install flex with homebrew
--------------------------

If your MacOS X computer does not have the :program:`flex` library
installed, then you can install it with :program:`homebrew`:

.. code-block:: console

   $ brew install flex

Unlike Linux pacakge managers, which would install the :program:`flex`
library files in the path :file:`/usr/lib/`,
:program:`homebrew` will install it to a path such as
:file:`/usr/local/Cellar/flex/X.Y.Z/lib/`.

To find the version of :program:`flex` that has been installed by
:program:`homebrew`, type:

.. code-block:: console

   $ ls /usr/local/cellar/flex

and you will get a listing such as:

.. code-block:: console

   2.6.4_2

This indicates that the version of :program:`flex` on your system is
:code:`2.6.4_2` (the :code:`_2` denotes the number of bug-fix updates
since version :code:`2.6.4` was released).

Now that you know the version, open the :file:`Makefile.defs` file for
editing and look for this block of code:

.. code-block:: make

    # Settings for MacOS
    # NOTE: IF you have installed flex with HomeBrew, then the
    # libfl.a library file will not be installed to /usr/lib
    # but to /usr/local/Cellar/flex/X.Y.Z/lib.
    #  --  Bob Yantosca (01 Nov 2021)
    ifeq ($(SYSTEM),Darwin)
      CC_FLAGS     += -DMACOS -O
      FLEX_LIB_DIR := /usr/local/Cellar/flex/2.6.4_2/lib
    endif

and edit the version number in the line where :code:`FLEX_LIB_DIR` is
defined (if necessary).
