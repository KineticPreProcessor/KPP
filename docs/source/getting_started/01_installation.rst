.. _install:

############
Installation
############

This section can be skipped if KPP is already installed on your system.

========================
Download KPP from Github
========================

Clone the KPP source code from the `KPP Github repository
<https://github.com/KineticPreProcessor/KPP>`_:

.. code-block:: console

   $ cd $HOME
   $ git clone https://github.com/KineticPreProcessor/KPP.git

This will create a folder named KPP in your home directory.

========================================
Define the KPP_HOME environment variable
========================================

Define the :envvar:`$KPP_HOME` environment variable to point to the
complete path where KPP is installed.  Also, add the path of the KPP
executable to the :envvar:`$PATH` environment variable.

If you are using the Unix C-shell (aka :program:`csh`), add
add these statements to your :file:`$HOME/.cshrc` file:

.. code-block:: csh

   setenv KPP_HOME $HOME/kpp
   setenv PATH ${PATH}:$KPP_HOME/bin

and then apply the settings with:

.. code-block:: console

   $ source $HOME/.cshrc

If, on the other hand, you are using the Unix :program:`bash` shell,
add these statements to your :file:`$HOME/.bashrc` file:

.. code-block:: bash

   export KPP_HOME=$HOME/kpp
   export PATH=$PATH:$KPP_HOME/bin

and then apply the settings with:

.. code-block:: console

   $ source $HOME/.bashrc

Now if you type:

.. code-block:: console

   $ echo $PATH

You should see the :envvar:`$KPP_HOME/bin` folder placed at the end of
the :envvar:`PATH` variable.

.. _test-for-dependencies:

=====================================================
Test if KPP dependencies are installed on your system
=====================================================

KPP depends on several other Unix packages.  Before using KPP for the
first time, test if these are installed on your system.  If any of
these packages are missing, you can install them with your
system's package manager (e.g. :program:`apt` for Ubuntu,
:program:`yum` for Fedora, :program:`homebrew` for MacOS, etc.), or
with `Spack <https://spack.readthedocs.io>`_.

gcc
---

KPP uses the `GNU Compiler Collection (aka gcc)
<https://gcc.gnu.org/>`_ by default.  A version of gcc comes
pre-installed with most Linux or MacOS systems.  To test if gcc is
installed on your system, type:

.. code-block :: console

   $ gcc --version

This will display the version information, such as:

.. code-block:: console

   gcc (GCC) 11.2.0
   Copyright (C) 2021 Free Software Foundation, Inc.
   This is free software; see the source for copying conditions.  There is NO
   warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

sed
---
The :program:`sed` utility is used to search for and replace text
in files.  To test if :program:`sed` has been installed, type:

.. code-block:: console

   $ which sed

This will print the path to :program:`sed` on your system.

bison
-----

The :program:`bison` utility parses the chemical mechanism file into a
computer-readable syntax.  To test :program:`bison` is installed, type:

.. code-block:: console

   $ which bison

This will print the path to :program:`bison` on your system.

flex
----

The :program:`flex` (the Fast Lexical Analyzer) creates a scanner that
can recognize the syntax generated by :program:`bison`.  To test if
:program:`flex` is installed, type:

.. code-block:: console

   $ which flex

This will print the path to :program:`flex` on your system.

Enter the path where the flex library (:file:`libfl.a` or
:file:`libfl.so` or ) is located into :file:`src/Makefile.defs`, e.g.

.. code-block:: make

   FLEX_LIB_DIR=/usr/lib

========================
Build the KPP executable
========================

Change to the KPP/src directory:

.. code-block:: console

   $ cd $KPP_HOME/src

To clean a previously-built KPP installation, delete the KPP object
files and all the examples with:

.. code-block:: console

   $ make clean

To delete a previoulsy-built KPP executable as well, type:

.. code-block:: console

   $ make distclean

KPP will use :program:`gcc` as the default compiler.  If you would
like to use a different compiler (e.g. :program:`icc`), then edit
:file:`src/Makefile.defs` to add your compiler name.

Create the KPP executable with:

.. code-block:: console

   $ make

You should see output similar to:

.. code-block:: console

   gcc -g -Wall -Wno-unused-function -I/usr/include -c code.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_c.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_f77.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_f90.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c code_matlab.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c debug.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c gen.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c kpp.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c lex.yy.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c scanner.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c scanutil.c
   gcc -g -Wall -Wno-unused-function -I/usr/include -c y.tab.c
   gcc -g -Wall -Wno-unused-function code.o code_c.o code_f77.o code_f90.o code_matlab.o debug.o gen.o kpp.o lex.yy.o scanner.o scanutil.o y.tab.o -L/usr/lib -lfl -o kpp

This will create the executable file :file:`$KPP_HOME/bin/kpp`.
